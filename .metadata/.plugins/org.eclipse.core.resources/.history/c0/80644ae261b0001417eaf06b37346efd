package bury_subscribers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.eclipse.core.runtime.IProgressMonitor;
import com.ibm.team.foundation.common.text.XMLString;
import com.ibm.team.process.common.IProcessConfigurationElement;
import com.ibm.team.process.common.advice.AdvisableOperation;
import com.ibm.team.process.common.advice.runtime.IOperationParticipant;
import com.ibm.team.process.common.advice.runtime.IParticipantInfoCollector;
import com.ibm.team.repository.common.IAuditable;
import com.ibm.team.repository.common.IContributorHandle;
import com.ibm.team.repository.common.TeamRepositoryException;
import com.ibm.team.repository.common.service.IContributorService;
import com.ibm.team.repository.service.AbstractService;
import com.ibm.team.workitem.common.ISaveParameter;
import com.ibm.team.workitem.common.model.IApproval;
import com.ibm.team.workitem.common.model.IApprovalDescriptor;
import com.ibm.team.workitem.common.model.IApprovals;
import com.ibm.team.workitem.common.model.IWorkItem;
import com.ibm.team.workitem.common.model.WorkItemApprovals;
import com.ibm.team.workitem.service.IWorkItemServer;


class UserCategory {
	public String userName;
	public String categoryName;
}

public class OperationParticipant extends AbstractService implements
		IOperationParticipant {

	 private static final String Recursion = "Approvalsbypass";   // can be anything u want must be unique 
	 private static Set<String> bypass =  new HashSet<String>(new ArrayList<String>(Arrays.asList(Recursion))); 
	 
	@Override
	public void run(AdvisableOperation operation,
			IProcessConfigurationElement participantConfig,
			IParticipantInfoCollector collector, IProgressMonitor monitor)
			throws TeamRepositoryException {

		Object data = operation.getOperationData();
		if (data instanceof ISaveParameter)
		{
			ISaveParameter save = (ISaveParameter)data;
			IAuditable audi = save.getNewState();
			if(audi instanceof IWorkItem)
			{
				 if ((save.getAdditionalSaveParameters() == null)||(save.getAdditionalSaveParameters() != null) && (!save.getAdditionalSaveParameters().contains(this.Recursion))) 
				 {        
					 IWorkItem wi = (IWorkItem)audi;
					 IWorkItemServer serverWI = getService(com.ibm.team.workitem.service.IWorkItemServer.class);
					 IContributorService serverUser = getService(com.ibm.team.repository.common.service.IContributorService.class);
					 IWorkItem itemCopy=(IWorkItem)serverWI.findWorkItemById(wi.getId(), IWorkItem.FULL_PROFILE, null).getWorkingCopy(); 
				
					 if (wi.getHTMLDescription().getPlainText().contains("<approval>")&& wi.getHTMLDescription().getPlainText().contains("</approval>"))
					 {
					Pattern TAG_REGEX = Pattern.compile("&lt;subscriber&gt;(.+?)&lt;/subscriber&gt;");
					String descriptionTXT = wi.getHTMLDescription().getXMLText();

					final Matcher matcher = TAG_REGEX.matcher(descriptionTXT);
					
					Set<String> people = new HashSet<String>();
					
					while (matcher.find()) {
						people.add(matcher.group(1));
					}

					for (String userName : people)
					{
						IContributorHandle  user = serverUser.fetchContributorByUserId(userName);
						if (user!=null)
						{
							if(!itemCopy.getSubscriptions().contains(user))
							{
								itemCopy.getSubscriptions().add(user);
							}
						}
					}
					
					String pattern = "&lt;subscriber&gt;(.+?)&lt;/subscriber&gt;";
					String updated = descriptionTXT.replaceAll(pattern, "");				
					itemCopy.setHTMLDescription(XMLString.createFromXMLText(updated));
					
					if (wi.getWorkItemType().equals("rfq_rfc_task"))
					{
						Pattern TAG_REGEX_APP = Pattern.compile("&lt;approval&gt;(.+?)&lt;/approval&gt;");
						List<String> strings = new ArrayList<String>();
						List<UserCategory> users = new ArrayList<UserCategory>();
						Set<String> categories = new HashSet<String>();
						
						String descriptionTXT_APP = itemCopy.getHTMLDescription().getXMLText();				
						
						
						final Matcher matcher_APP = TAG_REGEX_APP.matcher(descriptionTXT_APP);
						while (matcher_APP.find()) {
						       strings.add(matcher_APP.group(1));
						 }
											
						//Assety

						for (String tmp : strings)
						{
							if (tmp.split("#").length>1)
							{
								UserCategory current = new UserCategory();
								current.categoryName = tmp.split("#")[1];
								current.userName = tmp.split("#")[0];
								users.add(current);
								
								if (current.categoryName!=null)
								{
									categories.add(current.categoryName);
								}
							}
						}
						
						IApprovals approvals= itemCopy.getApprovals();
						
						for (UserCategory str : users)
						{
							IApprovalDescriptor descTmp = null;
							
							for (IApprovalDescriptor desc : approvals.getDescriptors())
							{
								if (desc.getName().equals(str.categoryName))
								{
									descTmp=desc;
									break;
								}
							}	
							
							if (descTmp==null)
							{
								descTmp = approvals.createDescriptor(WorkItemApprovals.APPROVAL_TYPE.getIdentifier(), str.categoryName);
							}
							
							
							IContributorHandle  user = serverUser.fetchContributorByUserId(str.userName);
							
							if (user != null)
							{
								
								IApproval approval= approvals.createApproval(descTmp, user);
								approvals.add(approval);
							}
						}
						
						String pattern_APP = "(&lt;approval&gt;)(.+?)(&lt;/approval&gt;)";
						String updated_APP = descriptionTXT_APP.replaceAll(pattern_APP, "");
						itemCopy.setHTMLDescription(XMLString.createFromXMLText(updated_APP));
					}
					serverWI.saveWorkItem3(itemCopy, null, null, bypass);
			}
			}
		
		}
	}
}
